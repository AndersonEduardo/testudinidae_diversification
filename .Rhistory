start = Sys.time()
window_geometry = gBuffer(xy[i], width=window_size)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
if (plot == TRUE){
cat('[STATUS] Executando plot... ')
start = Sys.time()
plot(landscape)
plot(buffer_geometry, add=TRUE)
plot(xy[i], add=TRUE)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
}
cat('[STATUS] Recortando paisagem para a geometria da janela... ')
start = Sys.time()
croped_area = raster::crop(
landscape[landscape$layer==habitat, ],
window_geometry
)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
if (is.null(croped_area)){
next
}
cat('[STATUS] Ajustando área recortada... ')
start = Sys.time()
croped_area = sp::disaggregate(croped_area)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
}else{
croped_area = landscape[landscape$layer==habitat, ]
cat('[STATUS] Executando plot... ')
start = Sys.time()
if (plot == TRUE){
plot(landscape)
plot(xy[i], add=TRUE)
}
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
}
cat('[STATUS] Simulando implantação de área de habitat... ')
start = Sys.time()
focal_area = add_points(xy[i], croped_area, width=restoration_size)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
cat('[STATUS] Realizando alguns ajustes... ')
start = Sys.time()
focal_area = sp::disaggregate(focal_area)
focal_area = as(focal_area, "SpatialPolygonsDataFrame")
names(focal_area@data) = 'layer'
focal_area@data$layer = habitat
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
cat('[STATUS] Computando métrica... ')
start = Sys.time()
metric = tryCatch(
eval_solution(
solution_polygon = focal_area,
folder_path = folder_path,
max_dist = max_dist,
habitat = habitat
), error=function(e){NA}
)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
cat('[STATUS] Registrando métrica computada...')
xy_df[i,'metric'] = metric
cat('pronto.\n')
write.csv(xy_df, file='./matrixmapper.csv')
cat('[STATUS] Finalizado ponto', i, ': metrica', metric, '\n')
point_time_end = Sys.time()
cat('[STATUS] Tempo da iteração:',
difftime(point_time_end, point_time_start, unit='secs'),
'segundos \n\n')
}
cat('[STATUS] Execução finalizada.')
total_time_end = Sys.time()
cat('[STATUS] Tempo total:',
as.numeric(difftime(total_time_end, total_time_start, unit='secs')),
'segundos.\n')
return(xy_df)
}
habitat = 'Floresta' #0
matrix = 'Matriz' #1
max_dist = 50  #50 #1000 # 500 #[40,50,60]
folder_path = './temp'
window_size = 20000 #10000 #[10000 - verificar algoritmo] #0.02 #5000 #0.02 #1000 #0.01 #for the "moving window"
restoration_size = 0.00001 #1 #0.004 #for the IIC
n = 10 #500 #1000 #500
# xy = spsample(x=as(extent(pf), "SpatialPolygons"), n=n, type='regular', pretty=TRUE)
xy = spsample(x=pf[pf$layer == matrix,], n=n, type='regular', pretty=TRUE)
xy_df = matrix_mapper(
xy = xy,
landscape = pf, #[pf$layer==habitat, ],
folder_path = folder_path,
window_size = window_size,
restoration_size = restoration_size,
max_dist = max_dist,
habitat = habitat,
matrix = matrix,
moving_window = TRUE, #TRUE,
plot = FALSE
)
cls
pwd
!pwd
getwd()
library(oecd)
?oecd::matrix_mapper()
# libraries
library(rgdal)
library(raster)
library(lconnect)
library(rgeos)
library(RColorBrewer)
# functions
normalize_vector_values = function(x){
return(
(x - min(x, na.rm=TRUE)) / (max(x, na.rm=TRUE) - min(x, na.rm=TRUE))
)
}
eval_solution = function(solution_polygon, folder_path, max_dist, habitat, metric='IIC'){
writeOGR(solution_polygon, folder_path, 'solution_polygon',
driver='ESRI Shapefile', overwrite_layer=TRUE, delete_dsn=TRUE)
landscape = upload_land(file.path(folder_path, 'solution_polygon.shp'),
bound_path = NULL,
habitat = habitat,
max_dist = max_dist)
metric = con_metric(landscape, metric=metric)
return(metric)
}
get_solutions = function(solution_list, temp_folder, max_dist, habitat=1){
for (i in 1:length(solution_list)){
solution_list[[i]][[1]]$layer = habitat
m_i = eval_solution(solution_list[[i]][[1]], temp_folder, max_dist, habitat)
solution_list[[i]][[2]]$metric = m_i
#plot(solution_list[[i]], main=paste('IIC =', m_i))
}
output = c()
for (i in 1:length(solution_list)){
output = append(output, solution_list[[i]][[2]])
}
output = bind(output)
return(output)
}
search_by_id = function(o, x){
for (i in 1:length(o@polygons)){
p_i = o@polygons[[i]]
if (i == p_i@ID){
return(p_i)
}
}
}
print_ids = function(o){
for (i in 1:length(o@polygons)){
print(o@polygons[[i]]@ID)
}
}
add_points = function(xy, f, width){
b = gBuffer(xy, width=width)
o = bind(f, b)
o = aggregate(o)
return(o)
}
matrix_mapper = function(xy, landscape, folder_path, window_size,
restoration_size, max_dist, habitat=1,
matrix=0, moving_window=FALSE, plot=FALSE){
cat('\n[STATUS] Inicializando... ')
total_time_start = Sys.time()
# metric = NA
xy_df = as.data.frame(xy)
xy_df$metric = NA
cat('pronto.\n')
for (i in 1:length(xy)){
point_time_start = Sys.time()
if (moving_window == TRUE){
cat('[STATUS] Computando geometria da janela deslizante... ')
start = Sys.time()
window_geometry = gBuffer(xy[i], width=window_size)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
if (plot == TRUE){
cat('[STATUS] Executando plot... ')
start = Sys.time()
plot(landscape)
plot(buffer_geometry, add=TRUE)
plot(xy[i], add=TRUE)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
}
cat('[STATUS] Recortando paisagem para a geometria da janela... ')
start = Sys.time()
croped_area = raster::crop(
landscape[landscape$layer==habitat, ],
window_geometry
)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
if (is.null(croped_area)){
next
}
cat('[STATUS] Ajustando área recortada... ')
start = Sys.time()
croped_area = sp::disaggregate(croped_area)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
}else{
croped_area = landscape[landscape$layer==habitat, ]
cat('[STATUS] Executando plot... ')
start = Sys.time()
if (plot == TRUE){
plot(landscape)
plot(xy[i], add=TRUE)
}
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
}
cat('[STATUS] Simulando implantação de área de habitat... ')
start = Sys.time()
focal_area = add_points(xy[i], croped_area, width=restoration_size)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
cat('[STATUS] Realizando alguns ajustes... ')
start = Sys.time()
focal_area = sp::disaggregate(focal_area)
focal_area = as(focal_area, "SpatialPolygonsDataFrame")
names(focal_area@data) = 'layer'
focal_area@data$layer = habitat
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
cat('[STATUS] Computando métrica... ')
start = Sys.time()
metric = tryCatch(
eval_solution(
solution_polygon = focal_area,
folder_path = folder_path,
max_dist = max_dist,
habitat = habitat
), error=function(e){NA}
)
end = Sys.time()
cat('pronto. (latência:', as.numeric(difftime(end, start, unit='secs')), 'segundos)\n')
cat('[STATUS] Registrando métrica computada...')
xy_df[i,'metric'] = metric
cat('pronto.\n')
write.csv(xy_df, file='./matrixmapper.csv')
cat('[STATUS] Finalizado ponto', i, ': metrica', metric, '\n')
point_time_end = Sys.time()
cat('[STATUS] Tempo da iteração:',
difftime(point_time_end, point_time_start, unit='secs'),
'segundos \n\n')
}
cat('[STATUS] Execução finalizada.')
total_time_end = Sys.time()
cat('[STATUS] Tempo total:',
as.numeric(difftime(total_time_end, total_time_start, unit='secs')),
'segundos.\n')
return(xy_df)
}
# pf = readOGR('./test_files/rs') # poligono dos feragmentos rondonia
# pf = readOGR('./paisagem nova/floresta_SC/floresta_SC.shp')  # sistema cantareira completo
# pf = raster::crop(
#   pf,
#   c(extent(pf)[1], c(extent(pf)[1]+10000, extent(pf)[3], extent(pf)[4]))
#   ) # sistema cantareira MENOR
pf = readOGR('./paisagem nova/Floresta_Sistema_Cantareira')  # NOVA (com matriz e floresta)
#################
pf = gBuffer(pf, byid = TRUE, width=0)  # PARA CORRIGIR INTERSECTIONS
#################
pf@data$id = NULL
names(pf) = 'layer'
### teste de tamanho de buffer
plot(pf[pf$layer=='Floresta',])
plot(xy[1], add=T, cex=1.5, col='red')
plot(gBuffer(xy[1], width = 20000), border='red', add=T)
plot(gBuffer(xy[1], width = 10000), border='red', add=T)
setwd("~/")
View(matrix_mapper)
setwd("~/")
setwd("C:/Users/ACT/git/testudinidae_diversification")
##assumindo que o R ja esta trabalhando no seu diretorio de trabalho (veja inicio deste script), abrir os resultados da analise de correlacao gerados pelo pyrate:
corPy = read.table('./pyrate_mcmc_logs/pbdb_data_1replicate_1_Grj_se_est_co2_0_expSp_expEx_HP.log', header=T)
corPy
##veja se esta tudo ok com os dados varregados:
head(corPy)
##coeficiente de correlacao da variavel ambiental com a taxa de especiacao (Gl):
CImarginGl = 1.96*sd(corPy$Gl)
CImarginGl
my_hist=hist(corPy$Gl,breaks=50,plot=F)
my_color= ifelse(my_hist$breaks > mean(corPy$Gl)+CImarginGl,rgb(0.8,0,0,0.5), ifelse(my_hist$breaks < mean(corPy$Gl)-CImarginGl, rgb(0.8,0,0,0.5), rgb(0.2,0.2,0.2,0.2) ))
plot(my_hist, col=my_color, border=FALSE, main='Coeficiente de correlaï¿½ï¿½o Gl', xlab='Gl', ylab='Frequï¿½ncia', xlim=c(-0.004,0.001))
abline(v=0)
plot(my_hist, col=my_color, border=FALSE, main='Correlation coefficient for Gl', xlab='Gl', ylab='Frequency')# xlim=c(-0.004,0.001))
abline(v=0)
##coeficiente de correlacao da variavel ambiental com a taxa de extincao (Gm):
CImarginGm = 1.96*sd(corPy$Gm)
my_hist=hist(corPy$Gm,breaks=50,plot=F)
my_color= ifelse(my_hist$breaks > mean(corPy$Gm)+CImarginGm,rgb(0.8,0,0,0.5), ifelse(my_hist$breaks < mean(corPy$Gm)-CImarginGm, rgb(0.8,0,0,0.5), rgb(0.2,0.2,0.2,0.2) ))
plot(my_hist, col=my_color, border=FALSE, main='Correlation coefficient for Gm', xlab='Gm', ylab='Frequency') #, xlim=c(-0.004,0.001))
abline(v=0)
x=1
read.table(
file.path(
'pyrate_mcmc_logs',
paste(
'pbdb_data_', x, 'replicate_', x,'_Grj_se_est_co2_0_expSp_expEx_HP.log'
)
)
)
## abrindo os resultados da analise de correlacao gerados pelo pyrate:
corPy = read.table(
file.path(
'pyrate_mcmc_logs',
paste(
'pbdb_data_', x, 'replicate_', x,'_Grj_se_est_co2_0_expSp_expEx_HP.log',
sep=''
)
)
)
corPy
read.table(
file.path(
'pyrate_mcmc_logs',
paste(
'pbdb_data_', x, 'replicate_', x,'_Grj_se_est_co2_0_expSp_expEx_HP.log',
sep=''
)
)
)
corPy$Gl
corPy
# abrindo os resultados da analise de correlacao gerados pelo pyrate:
corPy = read.table(
file.path(
'pyrate_mcmc_logs',
paste(
'pbdb_data_', x, 'replicate_', x,'_Grj_se_est_co2_0_expSp_expEx_HP.log',
sep=''
)
),
header=TRUE
)
corPy$Gl
1.96*sd(corPy$Gl)
CImarginGl
corPy
##abrindo a covariavel
covar = read.table('co2Cz.txt', header=TRUE)
covar
# abrindo os resultados da analise de correlacao gerados pelo pyrate:
corPy = read.table(
file.path(
'pyrate_mcmc_logs',
paste(
'pbdb_data_', x, 'replicate_', x,'_Grj_se_est_co2_0_expSp_expEx_HP.log',
sep=''
)
),
header=TRUE
)
# coeficiente de correlacao da variavel ambiental com a taxa de especiacao (Gl)
CImarginGl = 1.96*sd(corPy$Gl)
jpeg('pyrate_mcmc_logs/Gl.jpeg')
my_hist = hist(
corPy$Gl,
breaks = 50,
plot = FALSE
)
my_color = ifelse(
my_hist$breaks > mean(corPy$Gl) + CImarginGl,
rgb(0.8,0,0,0.5),
ifelse(
my_hist$breaks < mean(corPy$Gl) - CImarginGl,
rgb(0.8,0,0,0.5),
rgb(0.2,0.2,0.2,0.2)
)
)
plot(
my_hist,
col = my_color,
border = FALSE,
main = 'Correlation coefficient for Gl',
xlab = 'Gl',
ylab = 'Frequency'
)
abline(v=0)
dev.off()
##coeficiente de correlacao da variavel ambiental com a taxa de extincao (Gm):
CImarginGm = 1.96*sd(corPy$Gm)
jpeg('Gm.jpeg')
my_hist = hist(
corPy$Gm,
breaks = 50,
plot = FALSE
)
my_color = ifelse(
my_hist$breaks > mean(corPy$Gm) + CImarginGm,
rgb(0.8,0,0,0.5),
ifelse(
my_hist$breaks < mean(corPy$Gm) - CImarginGm,
rgb(0.8,0,0,0.5),
rgb(0.2,0.2,0.2,0.2)
)
)
plot(
my_hist,
col = my_color,
border = FALSE,
main = 'Correlation coefficient for Gm',
xlab = 'Gm',
ylab = 'Frequency'
)
abline(v=0)
dev.off()
# abrindo os resultados da analise de correlacao gerados pelo pyrate:
corPy = read.table(
file.path(
'pyrate_mcmc_logs',
paste(
'pbdb_data_', x, 'replicate_', x,'_Grj_se_est_co2_0_expSp_expEx_HP.log',
sep=''
)
),
header=TRUE
)
# coeficiente de correlacao da variavel ambiental com a taxa de especiacao (Gl)
CImarginGl = 1.96*sd(corPy$Gl)
# coeficiente de correlacao da variavel ambiental com a taxa de especiacao (Gl)
CImarginGl = 1.96*sd(corPy$Gl)
jpeg('pyrate_mcmc_logs/Gl.jpeg')
my_hist = hist(
corPy$Gl,
breaks = 50,
plot = FALSE
)
my_color = ifelse(
my_hist$breaks > mean(corPy$Gl) + CImarginGl,
rgb(0.8,0,0,0.5),
ifelse(
my_hist$breaks < mean(corPy$Gl) - CImarginGl,
rgb(0.8,0,0,0.5),
rgb(0.2,0.2,0.2,0.2)
)
)
plot(
my_hist,
col = my_color,
border = FALSE,
main = 'Correlation coefficient for Gl',
xlab = 'Gl',
ylab = 'Frequency'
)
abline(v=0)
dev.off()
##coeficiente de correlacao da variavel ambiental com a taxa de extincao (Gm):
CImarginGm = 1.96*sd(corPy$Gm)
jpeg('pyrate_mcmc_logs/Gm.jpeg')
my_hist = hist(
corPy$Gm,
breaks = 50,
plot = FALSE
)
my_color = ifelse(
my_hist$breaks > mean(corPy$Gm) + CImarginGm,
rgb(0.8,0,0,0.5),
ifelse(
my_hist$breaks < mean(corPy$Gm) - CImarginGm,
rgb(0.8,0,0,0.5),
rgb(0.2,0.2,0.2,0.2)
)
)
plot(
my_hist,
col = my_color,
border = FALSE,
main = 'Correlation coefficient for Gm',
xlab = 'Gm',
ylab = 'Frequency'
)
abline(v=0)
dev.off()
##abrindo a covariavel
covar = read.table('co2Cz.txt', header=TRUE)
head(covar) #verificando
L_mean=c(NA, 0.134625878596,0.134369867639,0.1341601135,0.13404832311,0.13395536363,0.133855512751,0.133726362079,0.133667572663,0.133629389942,0.133604413263,0.133594613519,0.133560628152,0.133547054015,0.133540023266,0.133564866614,0.133615898902,0.133644209379,0.133670187214,0.133728496267,0.13380029276,0.133831313181,0.133891875521,0.133914599016,0.133941750746,0.133963193099,0.133941012134,0.133956637921,0.133971723711,0.133997226642,0.134080815723,0.134100418883,0.134185888922,0.134277997608,0.134401709597,0.134533641206,0.134638040599,0.134812275292,0.134837290653,0.134853875876,0.134853977763,0.13488529581,0.134938900369,0.134968653404,0.135019259984,0.135137960374,0.135258101322,0.135433477859,0.135592119253,0.135842408775,0.13624875337,0.136891922478,0.137801740574,0.139495551291,0.141918738752,0.146114689461,0.150563518548,0.151792991109,0.152204187723,0.152668467994,0.152971348173,0.153399083817,0.153655967382)
M_mean=c(NA, 0.880398646278,0.843037987828,0.582481497748,0.151049693127,0.0802738206705,0.074940348817,0.0744441128617,0.0743418241698,0.074279512379,0.0742015840324,0.0741144589784,0.0740054844281,0.0738754124884,0.0737615049263,0.0736967866103,0.0736821306755,0.0737105151112,0.0737600346443,0.0738564386283,0.074079378024,0.0744698052286,0.0750143618948,0.0757560764573,0.0765445874217,0.0774698912068,0.0786422428222,0.0799438344736,0.0813473497762,0.0826857845648,0.0837437659928,0.0847188484718,0.0858493530629,0.0869081134691,0.0874955862646,0.0880480167799,0.0887723005725,0.0899059351354,0.0912921971094,0.092655866673,0.093975473729,0.0951741312513,0.096136489364,0.0969960791467,0.0976298876344,0.0983472099588,0.0990127119268,0.0995575309364,0.100151183004,0.100730743926,0.101559881344,0.102220187375,0.102665516683,0.103065053588,0.103728451351,0.104651981235,0.105843490096,0.107453553464,0.108926297189,0.109474733904,0.109491679093,0.109507230347,0.109513429663)
trans = 0.5
age = (0:(63-1))* -1
speciationRate = data.frame(age=rev(age), lambda=rev(L_mean))
extinctionRate = data.frame(age=rev(age), mu=rev(M_mean))
pairedDataCorSpeciation = data.frame()
pairedDataCorExtinction = data.frame()
##pareando CO2 com idades de especiacao
index = match(round(speciationRate$age,0)*-1, round(covar$time,0))
pairedDataCorSpeciation = rbind(pairedDataCorSpeciation, data.frame(lambda=speciationRate$lambda, co2=covar$co2[index]))
##pareando CO2 com idades de extincao
index = match(round(extinctionRate$age,0)*-1, round(covar$time,0))
pairedDataCorExtinction = rbind(pairedDataCorExtinction, data.frame(mu=extinctionRate$mu, co2=covar$co2[index]))
plot(pairedDataCorSpeciation$lambda ~ pairedDataCorSpeciation$co2, pch=19, col=rgb(0,0,0,0.5), xlab='CO2', ylab='Taxa de especiaï¿½ï¿½o')
reta = glm(pairedDataCorSpeciation$lambda ~ pairedDataCorSpeciation$co2)
abline(reta, col='red'); grid()
dev.off()
plot(pairedDataCorExtinction$mu ~ pairedDataCorExtinction$co2, pch=19, col=rgb(0,0,0,0.5), xlab='CO2', ylab='Taxa de extinï¿½ï¿½o', xlim=c(0,2000))
reta = lm(pairedDataCorSpeciation$mu ~ pairedDataCorExtinction$co2)
abline(reta, col='red'); grid()
file.path('pyrate_mcmc_logs', paste('Gl_', i, '.jpeg', sep = ''))
i=1
file.path('pyrate_mcmc_logs', paste('Gl_', i, '.jpeg', sep = ''))
for (i in 1:x){
print(i)
}
1:10
